type Mutation {
  # A mutation
  updateUserEmail(id: String, email: String): UpdateUserEmailPayload
  updateUser(id: Int!, name: String!): User
}

# The relay node interface
interface Node {
  id: ID!
}

# The relay pageInfo type used by connections
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

# A relay node type
type Photo implements Node {
  # A relay node id field
  id: ID!
}

type PhotoEdge {
  cursor: ID!
  node: Photo
}

# A relay connection type
type PhotosConnection {
  total: Int
  edges: [PhotoEdge]
  pageInfo: PageInfo
}

type Query {
  # A query to retrieve users form db
  users(id: String, name: String, email: String): [User]
}

# A relay mutation input type
input UpdateUserEmailInput {
  # The id field
  id: ID!

  # The email field
  email: String
  clientMutationId: String!
}

# A relay mutation payload type
type UpdateUserEmailPayload {
  # The user type
  user: User
  clientMutationId: String!
}

# A relay node type
type User implements Node {
  # A relay node id field
  id: ID!

  # The name of user
  name: String!

  # The email of user
  email: String!

  # The password of the user
  password: String!

  # User level access
  admin: Boolean
}
