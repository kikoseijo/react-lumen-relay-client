# source: http://altraser.dev/graphql
# timestamp: Thu Jan 25 2018 02:19:53 GMT+0100 (CET)

input LoginInput {
  email: String!
  password: String!
  clientMutationId: String!
}

type LoginPayload {
  user: User
  token: String!
  clientMutationId: String!
}

type Mutation {
  login(email: String!, password: String!): LoginPayload
  signupUser(name: String, password: String, email: String): RegisterPayload
  updateUserEmail(id: String, email: String): UpdateUserEmailPayload
}

"""The relay node interface"""
interface Node {
  id: ID!
}

"""The relay pageInfo type used by connections"""
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Photo implements Node {
  """A relay node id field"""
  id: ID!
}

type PhotoEdge {
  cursor: ID!
  node: Photo
}

type PhotosConnection {
  total: Int
  edges: [PhotoEdge]
  pageInfo: PageInfo
}

type Query {
  users(id: String, name: String, email: String): [User]

  """Get the current logged in user"""
  viewer: User
}

input RegisterInput {
  name: String!
  email: String!
  id: String!
  clientMutationId: String!
}

type RegisterPayload {
  token: String!
  id: ID!
  clientMutationId: String!
}

input UpdateUserEmailInput {
  id: ID!
  email: String!
  clientMutationId: String!
}

type UpdateUserEmailPayload {
  """The user type"""
  user: User
  clientMutationId: String!
}

type User implements Node {
  """A relay node id field"""
  id: ID!
  name: String!
  email: String!
  token: String
  password: String!
  admin: Boolean
}
