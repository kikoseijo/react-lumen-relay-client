# source: http://altraser.dev/graphql
# timestamp: Sun Jan 28 2018 00:38:27 GMT+0100 (CET)

input AddTodoInput {
  text: String!
  clientMutationId: String
}

type AddTodoPayload {
  todoEdge: TodoEdge
  viewer: User
  clientMutationId: String
}

input ChangeTodoStatusInput {
  complete: Boolean!
  id: String!
  clientMutationId: String
}

type ChangeTodoStatusPayload {
  todo: Todo
  viewer: User
  clientMutationId: String
}

input LoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginPayload {
  user: User
  token: String!
  clientMutationId: String
}

input MarkAllTodosInput {
  complete: Boolean!
  clientMutationId: String
}

type MarkAllTodosPayload {
  changedTodos: [Todo]
  viewer: User
  clientMutationId: String
}

type Mutation {
  login(email: String!, password: String!): LoginPayload
  signupUser(name: String, password: String, email: String): RegisterPayload
  updateUserEmail(id: String, email: String): UpdateUserEmailPayload
  addTodo(input: AddTodoInput!): AddTodoPayload
  changeTodoStatus(input: ChangeTodoStatusInput!): ChangeTodoStatusPayload
  markAllTodos(input: MarkAllTodosInput!): MarkAllTodosPayload
  removeCompletedTodos(input: RemoveCompletedTodosInput!): RemoveCompletedTodosPayload
  removeTodo(input: RemoveTodoInput!): RemoveTodoPayload
  renameTodo(input: RenameTodoInput!): RenameTodoPayload
}

"""The relay node interface"""
interface Node {
  id: ID!
}

"""The relay pageInfo type used by connections"""
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Photo implements Node {
  """A relay node id field"""
  id: ID!
}

type PhotoEdge {
  cursor: ID!
  node: Photo
}

type PhotosConnection {
  total: Int
  edges: [PhotoEdge]
  pageInfo: PageInfo
}

type Query {
  users(id: String, name: String, email: String): [User]

  """Get the current logged in user"""
  viewer: User
}

input RegisterInput {
  name: String!
  email: String!
  id: String!
  clientMutationId: String
}

type RegisterPayload {
  token: String!
  id: String!
  clientMutationId: String
}

input RemoveCompletedTodosInput {
  clientMutationId: String
}

type RemoveCompletedTodosPayload {
  deletedTodoIds: [Todo]
  viewer: User
  clientMutationId: String
}

input RemoveTodoInput {
  id: String!
  clientMutationId: String
}

type RemoveTodoPayload {
  deletedTodoId: ID
  viewer: User
  clientMutationId: String
}

input RenameTodoInput {
  id: String!
  text: String!
  clientMutationId: String
}

type RenameTodoPayload {
  todo: Todo
  clientMutationId: String
}

type Todo implements Node {
  """A relay node id field"""
  id: ID!
  text: String
  complete: Boolean
}

type TodoConnection {
  total: Int
  edges: [TodoEdge]
  pageInfo: PageInfo
}

type TodoEdge {
  cursor: ID!
  node: Todo
}

input UpdateUserEmailInput {
  id: String!
  email: String!
  clientMutationId: String
}

type UpdateUserEmailPayload {
  user: User
  clientMutationId: String
}

type User implements Node {
  """A relay node id field"""
  id: ID!
  name: String!
  email: String!
  token: String
  password: String!
  admin: Boolean
  totalCount: Int
  completedCount: Int

  """A field"""
  todos(first: Int, last: Int, after: String, before: String, status: String): TodoConnection
}
